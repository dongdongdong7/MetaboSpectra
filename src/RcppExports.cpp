// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// r_calculate_spectral_entropy
double r_calculate_spectral_entropy(const Rcpp::NumericMatrix peaks);
RcppExport SEXP _MetaboSpectra_r_calculate_spectral_entropy(SEXP peaksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type peaks(peaksSEXP);
    rcpp_result_gen = Rcpp::wrap(r_calculate_spectral_entropy(peaks));
    return rcpp_result_gen;
END_RCPP
}
// r_clean_spectrum
Rcpp::NumericMatrix r_clean_spectrum(const Rcpp::NumericMatrix peaks, float min_mz, float max_mz, float noise_threshold, float min_ms2_difference_in_da, float min_ms2_difference_in_ppm, int max_peak_num, bool normalize_intensity);
RcppExport SEXP _MetaboSpectra_r_clean_spectrum(SEXP peaksSEXP, SEXP min_mzSEXP, SEXP max_mzSEXP, SEXP noise_thresholdSEXP, SEXP min_ms2_difference_in_daSEXP, SEXP min_ms2_difference_in_ppmSEXP, SEXP max_peak_numSEXP, SEXP normalize_intensitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type peaks(peaksSEXP);
    Rcpp::traits::input_parameter< float >::type min_mz(min_mzSEXP);
    Rcpp::traits::input_parameter< float >::type max_mz(max_mzSEXP);
    Rcpp::traits::input_parameter< float >::type noise_threshold(noise_thresholdSEXP);
    Rcpp::traits::input_parameter< float >::type min_ms2_difference_in_da(min_ms2_difference_in_daSEXP);
    Rcpp::traits::input_parameter< float >::type min_ms2_difference_in_ppm(min_ms2_difference_in_ppmSEXP);
    Rcpp::traits::input_parameter< int >::type max_peak_num(max_peak_numSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize_intensity(normalize_intensitySEXP);
    rcpp_result_gen = Rcpp::wrap(r_clean_spectrum(peaks, min_mz, max_mz, noise_threshold, min_ms2_difference_in_da, min_ms2_difference_in_ppm, max_peak_num, normalize_intensity));
    return rcpp_result_gen;
END_RCPP
}
// r_calculate_unweighted_entropy_similarity
double r_calculate_unweighted_entropy_similarity(const Rcpp::NumericMatrix peaks_a, const Rcpp::NumericMatrix peaks_b, float ms2_tolerance_in_da, float ms2_tolerance_in_ppm, bool clean_spectra, float min_mz, float max_mz, float noise_threshold, int max_peak_num);
RcppExport SEXP _MetaboSpectra_r_calculate_unweighted_entropy_similarity(SEXP peaks_aSEXP, SEXP peaks_bSEXP, SEXP ms2_tolerance_in_daSEXP, SEXP ms2_tolerance_in_ppmSEXP, SEXP clean_spectraSEXP, SEXP min_mzSEXP, SEXP max_mzSEXP, SEXP noise_thresholdSEXP, SEXP max_peak_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type peaks_a(peaks_aSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type peaks_b(peaks_bSEXP);
    Rcpp::traits::input_parameter< float >::type ms2_tolerance_in_da(ms2_tolerance_in_daSEXP);
    Rcpp::traits::input_parameter< float >::type ms2_tolerance_in_ppm(ms2_tolerance_in_ppmSEXP);
    Rcpp::traits::input_parameter< bool >::type clean_spectra(clean_spectraSEXP);
    Rcpp::traits::input_parameter< float >::type min_mz(min_mzSEXP);
    Rcpp::traits::input_parameter< float >::type max_mz(max_mzSEXP);
    Rcpp::traits::input_parameter< float >::type noise_threshold(noise_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_peak_num(max_peak_numSEXP);
    rcpp_result_gen = Rcpp::wrap(r_calculate_unweighted_entropy_similarity(peaks_a, peaks_b, ms2_tolerance_in_da, ms2_tolerance_in_ppm, clean_spectra, min_mz, max_mz, noise_threshold, max_peak_num));
    return rcpp_result_gen;
END_RCPP
}
// r_calculate_entropy_similarity
double r_calculate_entropy_similarity(const Rcpp::NumericMatrix peaks_a, const Rcpp::NumericMatrix peaks_b, float ms2_tolerance_in_da, float ms2_tolerance_in_ppm, bool clean_spectra, float min_mz, float max_mz, float noise_threshold, int max_peak_num);
RcppExport SEXP _MetaboSpectra_r_calculate_entropy_similarity(SEXP peaks_aSEXP, SEXP peaks_bSEXP, SEXP ms2_tolerance_in_daSEXP, SEXP ms2_tolerance_in_ppmSEXP, SEXP clean_spectraSEXP, SEXP min_mzSEXP, SEXP max_mzSEXP, SEXP noise_thresholdSEXP, SEXP max_peak_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type peaks_a(peaks_aSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type peaks_b(peaks_bSEXP);
    Rcpp::traits::input_parameter< float >::type ms2_tolerance_in_da(ms2_tolerance_in_daSEXP);
    Rcpp::traits::input_parameter< float >::type ms2_tolerance_in_ppm(ms2_tolerance_in_ppmSEXP);
    Rcpp::traits::input_parameter< bool >::type clean_spectra(clean_spectraSEXP);
    Rcpp::traits::input_parameter< float >::type min_mz(min_mzSEXP);
    Rcpp::traits::input_parameter< float >::type max_mz(max_mzSEXP);
    Rcpp::traits::input_parameter< float >::type noise_threshold(noise_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_peak_num(max_peak_numSEXP);
    rcpp_result_gen = Rcpp::wrap(r_calculate_entropy_similarity(peaks_a, peaks_b, ms2_tolerance_in_da, ms2_tolerance_in_ppm, clean_spectra, min_mz, max_mz, noise_threshold, max_peak_num));
    return rcpp_result_gen;
END_RCPP
}
// slim_peaksMatrix_rcpp
Rcpp::NumericMatrix slim_peaksMatrix_rcpp(Rcpp::NumericMatrix peaksMatrix, double ppm, std::string mz_method, std::string intensity_method);
RcppExport SEXP _MetaboSpectra_slim_peaksMatrix_rcpp(SEXP peaksMatrixSEXP, SEXP ppmSEXP, SEXP mz_methodSEXP, SEXP intensity_methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type peaksMatrix(peaksMatrixSEXP);
    Rcpp::traits::input_parameter< double >::type ppm(ppmSEXP);
    Rcpp::traits::input_parameter< std::string >::type mz_method(mz_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type intensity_method(intensity_methodSEXP);
    rcpp_result_gen = Rcpp::wrap(slim_peaksMatrix_rcpp(peaksMatrix, ppm, mz_method, intensity_method));
    return rcpp_result_gen;
END_RCPP
}
// batch_slim_peaksMatrix_rcpp
Rcpp::List batch_slim_peaksMatrix_rcpp(Rcpp::List peaksMatrixList, double ppm, std::string mz_method, std::string intensity_method);
RcppExport SEXP _MetaboSpectra_batch_slim_peaksMatrix_rcpp(SEXP peaksMatrixListSEXP, SEXP ppmSEXP, SEXP mz_methodSEXP, SEXP intensity_methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type peaksMatrixList(peaksMatrixListSEXP);
    Rcpp::traits::input_parameter< double >::type ppm(ppmSEXP);
    Rcpp::traits::input_parameter< std::string >::type mz_method(mz_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type intensity_method(intensity_methodSEXP);
    rcpp_result_gen = Rcpp::wrap(batch_slim_peaksMatrix_rcpp(peaksMatrixList, ppm, mz_method, intensity_method));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MetaboSpectra_r_calculate_spectral_entropy", (DL_FUNC) &_MetaboSpectra_r_calculate_spectral_entropy, 1},
    {"_MetaboSpectra_r_clean_spectrum", (DL_FUNC) &_MetaboSpectra_r_clean_spectrum, 8},
    {"_MetaboSpectra_r_calculate_unweighted_entropy_similarity", (DL_FUNC) &_MetaboSpectra_r_calculate_unweighted_entropy_similarity, 9},
    {"_MetaboSpectra_r_calculate_entropy_similarity", (DL_FUNC) &_MetaboSpectra_r_calculate_entropy_similarity, 9},
    {"_MetaboSpectra_slim_peaksMatrix_rcpp", (DL_FUNC) &_MetaboSpectra_slim_peaksMatrix_rcpp, 4},
    {"_MetaboSpectra_batch_slim_peaksMatrix_rcpp", (DL_FUNC) &_MetaboSpectra_batch_slim_peaksMatrix_rcpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_MetaboSpectra(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
